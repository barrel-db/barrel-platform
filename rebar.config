%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
%
{require_otp_vsn, "18|19"}.

{erl_opts, [
  debug_info,
  {parse_transform, mochicow}
]}.

{deps, [
  {hooks, "1.1.1"},
  {snappy, "1.1.1"},
  {ucol, "2.0.0"},
  {oauth, "1.6.0", {pkg, barrel_oauth}},
  {ibrowse, "4.3.1", {pkg, barrel_ibrowse}},
  {hackney, "1.5.7"},
  {jsx, "2.8.0"},
  {hooks, "1.1.1"},
  {fast_yaml, "1.0.3"},
  {exometer_core, "1.4.0"},
  {mochicow, "0.6.4"}
]}.

{overrides,
  [
    {override, fast_yaml,
      [{deps, [p1_utils]},
        {plugins, [pc]},
        {artifacts, ["priv/lib/fast_yaml.so"]},
        {provider_hooks, [{post,
          [{compile, {pc, compile}},
            {clean, {pc, clean}}]
        }]}
      ]
    }
  ]
}.


{pre_hooks, [{"(linux|darwin|solaris)", compile, "make -C c_src/barrel_js"},
             {"(freebsd|netbsd|openbsd)", compile, "gmake -C c_src/barrel_js"}]}.

{post_hooks, [{"(linux|darwin|solaris)", clean, "make -C c_src/barrel_js clean"},
              {"(freebsd|netbsd|openbsd)", compile, "gmake -C c_src/barrel_js clean"},
              {compile, "escript support/build_js.escript"}]}.

{relx, [
  {release, {'barrel', "0.1.0"}, [lager, barrel]},

  {deps, [{lager, "3.0.2"}]},

  {dev_mode, true},
  {include_erts, false},
  {extended_start_script, true},


  {overlay_vars, "config/vars.config"},
  {overlay, [
    {mkdir, "log"},
    {mkdir, "run"},
    {mkdir, "data"},
    {mkdir, "etc"},

    {mkdir, "etc/barrel.d"},
    {template, "config/lager.yml", "etc/barrel.d/lager.yml"},

    %% keep empty files
    {copy, "config/empty", "log/KEEP"},
    {copy, "config/empty", "data/KEEP"},

    %% config files
    {template, "config/barrel.yml", "etc/barrel.yml"},
    {template, "config/sys.config", "releases/{{rel_vsn}}/sys.config"},
    {template, "config/vm.args", "releases/{{rel_vsn}}/vm.args"}


  ]}
]}.

{cover_enabled, true}.
{eunit_opts, [verbose]}.
{xref_checks, [undefined_function_calls]}.
{post_hooks, [{clean, "rm -rf *~ */*~ */*.xfm test/*.beam"}]}.

{shell, [
  {config, "config/shell.config"}
]}.

{profiles, [

  {staging, [
    {erl_opts, [
      {parse_transform, lager_transform},
      {d, 'HUT_LAGER'}
    ]},

    {relx, [
      {dev_mode, true},
      {include_erts, true},
      {extended_start_script, true},
      {overlay_vars, "config/prod.config"}
    ]}
  ]},

  {prod, [
    {erl_opts, [
      {parse_transform, lager_transform},
      {d, 'HUT_LAGER'}
    ]},

    {relx, [
      {dev_mode, false},
      {include_erts, true},
      {extended_start_script, true},
      {overlay_vars, "config/prod.config"}
    ]}

  ]},

  {test, []}
  ]
}.
